# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

variables:
- name: angularProjectName
  value: blog-ng-client
- name: projectName
  value: blog-ng-client
- name: projectPath
  value: 'source/WebUI/BlogClientApp'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: |
        npm install -g @angular/cli
        npm install
      displayName: 'Install packages'
      workingDirectory: '$(projectPath)'

    - script: |
        ng lint
      displayName: 'Run linter'
      workingDirectory: '$(projectPath)'

    - script: |
        npm run test-headless
      displayName: 'Run tests'
      workingDirectory: '$(projectPath)'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TESTS-*.xml'
      displayName: 'Publish test results'

    - script: |
        ng build --prod
      displayName: 'Build for prod'
      workingDirectory: '$(projectPath)'

    - task: ArchiveFiles@2
      inputs:        
        rootFolderOrFile: '$(projectPath)/dist/$(angularProjectName)'
        includeRootFolder: true
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        ArtifactName: '$(projectName)'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy '
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: 'ubuntu-20.04'
    environment: $(environmentName)
    strategy:
      runOnce:
        deploy:
          steps:
          - task: DownloadBuildArtifacts@0
            displayName: 'Download artifact'
            inputs:
              buildType: 'current'
              downloadType: 'single'
              artifactName: '$(projectName)'
              downloadPath: '$(System.ArtifactsDirectory)'
          
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '**/*.zip'
              destinationFolder: '$(System.ArtifactsDirectory)/extracted'
              cleanDestinationFolder: true
              overwriteExistingFiles: true

         