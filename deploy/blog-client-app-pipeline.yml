# Node.js with Angular
# Build a Node.js project that uses Angular.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/javascript

variables:
- name: angularProjectName
  value: blog-ng-client
- name: projectName
  value: BlogClientApp
- name: projectPath
  value: 'source/WebUI/$(projectName)'

stages:
- stage: Build
  displayName: Build stage
  jobs:
  - job: Build
    pool:
      vmImage: 'ubuntu-20.04'
    steps:
    - task: NodeTool@0
      inputs:
        versionSpec: '10.x'
      displayName: 'Install Node.js'

    - script: |
        npm install -g @angular/cli
        npm install
      displayName: 'Install packages'
      workingDirectory: '$(projectPath)'

    - script: |
        ng lint
      displayName: 'Run linter'
      workingDirectory: '$(projectPath)'

    - script: |
        npm run test-headless
      displayName: 'Run tests'
      workingDirectory: '$(projectPath)'

    - task: PublishTestResults@2
      condition: succeededOrFailed()
      inputs:
        testResultsFormat: 'JUnit'
        testResultsFiles: '**/TESTS-*.xml'
      displayName: 'Publish test results'

    - script: |
        ng build --prod
      displayName: 'Build for prod'
      workingDirectory: '$(projectPath)'
    
    - task: CopyFiles@2
      inputs:
        SourceFolder: 'deploy'
        Contents: '*.json'
        TargetFolder: '$(projectPath)/dist/blog-ng-client'

    - task: ArchiveFiles@2
      inputs:        
        rootFolderOrFile: '$(projectPath)/dist/blog-ng-client'
        includeRootFolder: false
        archiveType: 'zip'
        archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        replaceExistingArchive: true

    - task: PublishBuildArtifacts@1
      inputs:
        PathtoPublish: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId).zip'
        ArtifactName: '$(projectName)'
        publishLocation: 'Container'

- stage: Deploy
  displayName: 'Deploy '
  dependsOn: Build
  condition: succeeded()
  jobs:
  - deployment: DeploymentJob
    pool:
      vmImage: 'ubuntu-20.04'
    environment: 'DEV'
    strategy:
      runOnce:
        deploy:
          steps:
          - task: PowerShell@2
            displayName: 'List dir'
            inputs:
              targetType: 'inline'
              script: 'Get-ChildItem $(System.DefaultWorkingDirectory)'
          - task: ExtractFiles@1
            inputs:
              archiveFilePatterns: '$(System.WorkFolder)/**/*.zip'
              destinationFolder: '$(System.WorkFolder)'
              cleanDestinationFolder: false
              overwriteExistingFiles: true
          - task: AzureResourceManagerTemplateDeployment@3
            inputs:
              deploymentScope: 'Resource Group'
              azureResourceManagerConnection: 'az-infinitum-connection'
              subscriptionId: '1bc29c05-0f12-4f80-84f1-9fd4f924c9cf'
              action: 'Create Or Update Resource Group'
              resourceGroupName: 'it-snippets-DEV'
              location: 'West Europe'
              templateLocation: 'Linked artifact'
              csmFile: '$(System.WorkFolder)/blog-client-app-template.json'
              csmParametersFile: '$(System.WorkFolder)/blog-client-app-parameters.json'
              deploymentMode: 'Incremental'

          - task: AzureWebApp@1
            inputs:
              azureSubscription: 'az-infinitum-connection'
              appType: 'webAppLinux'
              appName: 'it-snippets'
              package: '$(System.WorkFolder)/**/$(projectName)/*.zip'
              runtimeStack: 'NODE|12-lts'
              startUpCommand: 'pm2 serve /home/site/wwwroot --no-daemon --spa'
            
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: 'az-infinitum-connection'
              Action: 'Start Azure App Service'
              WebAppName: 'it-snippets'